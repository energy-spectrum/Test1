// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: racks.sql

package db

import (
	"context"
)

const getMainRack = `-- name: GetMainRack :one
SELECT name, product_id, is_main FROM racks
WHERE product_id = $1 AND is_main = true
LIMIT 1
`

func (q *Queries) GetMainRack(ctx context.Context, productID int64) (Rack, error) {
	row := q.db.QueryRowContext(ctx, getMainRack, productID)
	var i Rack
	err := row.Scan(&i.Name, &i.ProductID, &i.IsMain)
	return i, err
}

const getSecondaryRacks = `-- name: GetSecondaryRacks :many
SELECT name, product_id, is_main FROM racks
WHERE product_id = $1 AND is_main = false
`

func (q *Queries) GetSecondaryRacks(ctx context.Context, productID int64) ([]Rack, error) {
	rows, err := q.db.QueryContext(ctx, getSecondaryRacks, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rack
	for rows.Next() {
		var i Rack
		if err := rows.Scan(&i.Name, &i.ProductID, &i.IsMain); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
